// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IRCPluginClient is the client API for IRCPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IRCPluginClient interface {
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	SendChannelMessage(ctx context.Context, in *ChannelMessage, opts ...grpc.CallOption) (*Error, error)
	SendRawMessage(ctx context.Context, in *RawMessage, opts ...grpc.CallOption) (*Error, error)
	GetMessages(ctx context.Context, in *Channel, opts ...grpc.CallOption) (IRCPlugin_GetMessagesClient, error)
	JoinChannel(ctx context.Context, in *Channel, opts ...grpc.CallOption) (*Error, error)
	LeaveChannel(ctx context.Context, in *Channel, opts ...grpc.CallOption) (*Error, error)
	ListChannel(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ChannelList, error)
}

type iRCPluginClient struct {
	cc grpc.ClientConnInterface
}

func NewIRCPluginClient(cc grpc.ClientConnInterface) IRCPluginClient {
	return &iRCPluginClient{cc}
}

func (c *iRCPluginClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/rpc.IRCPlugin/ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iRCPluginClient) SendChannelMessage(ctx context.Context, in *ChannelMessage, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/rpc.IRCPlugin/sendChannelMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iRCPluginClient) SendRawMessage(ctx context.Context, in *RawMessage, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/rpc.IRCPlugin/sendRawMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iRCPluginClient) GetMessages(ctx context.Context, in *Channel, opts ...grpc.CallOption) (IRCPlugin_GetMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &IRCPlugin_ServiceDesc.Streams[0], "/rpc.IRCPlugin/getMessages", opts...)
	if err != nil {
		return nil, err
	}
	x := &iRCPluginGetMessagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IRCPlugin_GetMessagesClient interface {
	Recv() (*ChannelMessage, error)
	grpc.ClientStream
}

type iRCPluginGetMessagesClient struct {
	grpc.ClientStream
}

func (x *iRCPluginGetMessagesClient) Recv() (*ChannelMessage, error) {
	m := new(ChannelMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *iRCPluginClient) JoinChannel(ctx context.Context, in *Channel, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/rpc.IRCPlugin/joinChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iRCPluginClient) LeaveChannel(ctx context.Context, in *Channel, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/rpc.IRCPlugin/leaveChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iRCPluginClient) ListChannel(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ChannelList, error) {
	out := new(ChannelList)
	err := c.cc.Invoke(ctx, "/rpc.IRCPlugin/listChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IRCPluginServer is the server API for IRCPlugin service.
// All implementations must embed UnimplementedIRCPluginServer
// for forward compatibility
type IRCPluginServer interface {
	Ping(context.Context, *Empty) (*Empty, error)
	SendChannelMessage(context.Context, *ChannelMessage) (*Error, error)
	SendRawMessage(context.Context, *RawMessage) (*Error, error)
	GetMessages(*Channel, IRCPlugin_GetMessagesServer) error
	JoinChannel(context.Context, *Channel) (*Error, error)
	LeaveChannel(context.Context, *Channel) (*Error, error)
	ListChannel(context.Context, *Empty) (*ChannelList, error)
	mustEmbedUnimplementedIRCPluginServer()
}

// UnimplementedIRCPluginServer must be embedded to have forward compatible implementations.
type UnimplementedIRCPluginServer struct {
}

func (UnimplementedIRCPluginServer) Ping(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedIRCPluginServer) SendChannelMessage(context.Context, *ChannelMessage) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendChannelMessage not implemented")
}
func (UnimplementedIRCPluginServer) SendRawMessage(context.Context, *RawMessage) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRawMessage not implemented")
}
func (UnimplementedIRCPluginServer) GetMessages(*Channel, IRCPlugin_GetMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMessages not implemented")
}
func (UnimplementedIRCPluginServer) JoinChannel(context.Context, *Channel) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinChannel not implemented")
}
func (UnimplementedIRCPluginServer) LeaveChannel(context.Context, *Channel) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveChannel not implemented")
}
func (UnimplementedIRCPluginServer) ListChannel(context.Context, *Empty) (*ChannelList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChannel not implemented")
}
func (UnimplementedIRCPluginServer) mustEmbedUnimplementedIRCPluginServer() {}

// UnsafeIRCPluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IRCPluginServer will
// result in compilation errors.
type UnsafeIRCPluginServer interface {
	mustEmbedUnimplementedIRCPluginServer()
}

func RegisterIRCPluginServer(s grpc.ServiceRegistrar, srv IRCPluginServer) {
	s.RegisterService(&IRCPlugin_ServiceDesc, srv)
}

func _IRCPlugin_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IRCPluginServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.IRCPlugin/ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IRCPluginServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IRCPlugin_SendChannelMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IRCPluginServer).SendChannelMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.IRCPlugin/sendChannelMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IRCPluginServer).SendChannelMessage(ctx, req.(*ChannelMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _IRCPlugin_SendRawMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IRCPluginServer).SendRawMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.IRCPlugin/sendRawMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IRCPluginServer).SendRawMessage(ctx, req.(*RawMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _IRCPlugin_GetMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Channel)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IRCPluginServer).GetMessages(m, &iRCPluginGetMessagesServer{stream})
}

type IRCPlugin_GetMessagesServer interface {
	Send(*ChannelMessage) error
	grpc.ServerStream
}

type iRCPluginGetMessagesServer struct {
	grpc.ServerStream
}

func (x *iRCPluginGetMessagesServer) Send(m *ChannelMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _IRCPlugin_JoinChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Channel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IRCPluginServer).JoinChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.IRCPlugin/joinChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IRCPluginServer).JoinChannel(ctx, req.(*Channel))
	}
	return interceptor(ctx, in, info, handler)
}

func _IRCPlugin_LeaveChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Channel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IRCPluginServer).LeaveChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.IRCPlugin/leaveChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IRCPluginServer).LeaveChannel(ctx, req.(*Channel))
	}
	return interceptor(ctx, in, info, handler)
}

func _IRCPlugin_ListChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IRCPluginServer).ListChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.IRCPlugin/listChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IRCPluginServer).ListChannel(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// IRCPlugin_ServiceDesc is the grpc.ServiceDesc for IRCPlugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IRCPlugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.IRCPlugin",
	HandlerType: (*IRCPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ping",
			Handler:    _IRCPlugin_Ping_Handler,
		},
		{
			MethodName: "sendChannelMessage",
			Handler:    _IRCPlugin_SendChannelMessage_Handler,
		},
		{
			MethodName: "sendRawMessage",
			Handler:    _IRCPlugin_SendRawMessage_Handler,
		},
		{
			MethodName: "joinChannel",
			Handler:    _IRCPlugin_JoinChannel_Handler,
		},
		{
			MethodName: "leaveChannel",
			Handler:    _IRCPlugin_LeaveChannel_Handler,
		},
		{
			MethodName: "listChannel",
			Handler:    _IRCPlugin_ListChannel_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getMessages",
			Handler:       _IRCPlugin_GetMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "plugin.proto",
}

// HTTPPluginClient is the client API for HTTPPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HTTPPluginClient interface {
	GetRequest(ctx context.Context, opts ...grpc.CallOption) (HTTPPlugin_GetRequestClient, error)
}

type hTTPPluginClient struct {
	cc grpc.ClientConnInterface
}

func NewHTTPPluginClient(cc grpc.ClientConnInterface) HTTPPluginClient {
	return &hTTPPluginClient{cc}
}

func (c *hTTPPluginClient) GetRequest(ctx context.Context, opts ...grpc.CallOption) (HTTPPlugin_GetRequestClient, error) {
	stream, err := c.cc.NewStream(ctx, &HTTPPlugin_ServiceDesc.Streams[0], "/rpc.HTTPPlugin/getRequest", opts...)
	if err != nil {
		return nil, err
	}
	x := &hTTPPluginGetRequestClient{stream}
	return x, nil
}

type HTTPPlugin_GetRequestClient interface {
	Send(*HttpResponse) error
	Recv() (*HttpRequest, error)
	grpc.ClientStream
}

type hTTPPluginGetRequestClient struct {
	grpc.ClientStream
}

func (x *hTTPPluginGetRequestClient) Send(m *HttpResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *hTTPPluginGetRequestClient) Recv() (*HttpRequest, error) {
	m := new(HttpRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HTTPPluginServer is the server API for HTTPPlugin service.
// All implementations must embed UnimplementedHTTPPluginServer
// for forward compatibility
type HTTPPluginServer interface {
	GetRequest(HTTPPlugin_GetRequestServer) error
	mustEmbedUnimplementedHTTPPluginServer()
}

// UnimplementedHTTPPluginServer must be embedded to have forward compatible implementations.
type UnimplementedHTTPPluginServer struct {
}

func (UnimplementedHTTPPluginServer) GetRequest(HTTPPlugin_GetRequestServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRequest not implemented")
}
func (UnimplementedHTTPPluginServer) mustEmbedUnimplementedHTTPPluginServer() {}

// UnsafeHTTPPluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HTTPPluginServer will
// result in compilation errors.
type UnsafeHTTPPluginServer interface {
	mustEmbedUnimplementedHTTPPluginServer()
}

func RegisterHTTPPluginServer(s grpc.ServiceRegistrar, srv HTTPPluginServer) {
	s.RegisterService(&HTTPPlugin_ServiceDesc, srv)
}

func _HTTPPlugin_GetRequest_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HTTPPluginServer).GetRequest(&hTTPPluginGetRequestServer{stream})
}

type HTTPPlugin_GetRequestServer interface {
	Send(*HttpRequest) error
	Recv() (*HttpResponse, error)
	grpc.ServerStream
}

type hTTPPluginGetRequestServer struct {
	grpc.ServerStream
}

func (x *hTTPPluginGetRequestServer) Send(m *HttpRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *hTTPPluginGetRequestServer) Recv() (*HttpResponse, error) {
	m := new(HttpResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HTTPPlugin_ServiceDesc is the grpc.ServiceDesc for HTTPPlugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HTTPPlugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.HTTPPlugin",
	HandlerType: (*HTTPPluginServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getRequest",
			Handler:       _HTTPPlugin_GetRequest_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "plugin.proto",
}
